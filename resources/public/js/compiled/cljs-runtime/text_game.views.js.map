{"version":3,"sources":["text_game/views.cljs"],"mappings":";;;;;;;;AASA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AA0BL,AAAKC,AAAK,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AACX,AAAKC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;AACb,AAAKG,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACJ,AAAAA,AAAAA;;AAEb,AAAKK,AAAW,AAAA,AAAA,AAAA,AAACC;AAEjB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAE0B,AAAA,AAAAC,AAAA,AAAA,AAACC,AAAQJ,AACT,AAAA,AAAA,AAAAG,AAA0BP,AAC1B,AAAA,AAAA,AAAAO,AAAgBL;;AAS1C,AAAA,AAAMO,AAAcC;AAApB,AACE,AAAI,AAAA,AAACC,AAAED;AAAP;;AAAuBA;;;AAGzB,AAAA,AAAMG;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAIuC,AAAA,AAAAL,AAAA,AAAA,AAACC,AAAQJ;AAJhD,AAK4C,AAAA,AAACU,AAAMV,AAAWW,AAAY,AAAA,AAAAH;AAL1E,AAM8C,AAAKI;AAAL,AACE,AAAA,AAACC,AAAoB,AAAYD;;AACjC,AAAI,AAAA,AAACL,AAAK,AAAYK;AACpB,AACE,AAAAE,AAAA,AAAA,AACoB,AAAA,AAAAX,AAACa,AAAMlB,AACD,AAACO,AACA,AAAA,AAAAF,AAAA,AAAA,AAACC,AAAQJ,AAChB,AAAA,AAAAG,AAACc,AAAMrB;AAJ3B,AAAA,AAAAkB,AAAAA,AAACC,AAAAA,AAAAA;;AAKD,AAAA,AAAA,AAACL,AAAMV,AAAWW;;AAPtB;;AARhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAgB+C,AAAA,AAACP,AAAOZ,AAAS,AAAC0B,AAAQ,AAAA,AAAAf,AAACgB,AAAOvB;;AAIjF,AAAA,AAAMwB;AAAN,AAAqB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIG,AAACZ,AAKmB;AAAA,AAAO,AACE,AAAAa,AAAA,AAAA,AACoB,AAAA,AAAAnB,AAACa,AAAMlB,AACD,AAACO,AACA,AAAA,AAAAF,AAAA,AAAA,AAACC,AAAQJ,AAChB,AAAA,AAAAG,AAACc,AAAMrB;AAJ3B,AAAA,AAAA0B,AAAAA,AAACP,AAAAA,AAAAA;;AAKD,AAAA,AAAA,AAACL,AAAMV,AAAWW;AAflD,AAgBG,AAACT;;AAEzB,AAAA,AAAMqB;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI+B,AAAA,AAAApB,AAAA,AAAAA,AAACqB,AAAsB/B,AAAMK,AACnC,AAACI;;AAE1B,AAAA,AAAMuB;AAAN,AAAA,AAAA,AAEG,AAAI,AAAA,AAAAtB,AAACgB,AAAOvB,AACX,AAACwB,AACD,AAACG","names":["text-game.views/prompts","text-game.views/text","G__43763","re-frame.core/subscribe","text-game.views/blanks","G__43764","text-game.views/inputs","G__43765","text-game.views/input-data","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","text-game.views/debug-panel","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","text-game.views/check-filled","input","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__43766#","text-game.views/custom-input","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","e","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","G__43767","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/first","text-game.views/input-panel","no-input","G__43768","text-game.views/mad-lib-panel","text-game.utils/get-final-text","text-game.views/main-panel"],"sourcesContent":["(ns text-game.views\n  (:require\n   [reagent.core :as reagent]\n   [re-frame.core :as re-frame]\n   [text-game.events :as events]\n   [text-game.subs :as subs]\n   [clojure.string :as str]\n   [text-game.utils :as utils]))\n\n(def prompts {:animal \"name of an animal\"\n              :animal_plural \"plural of an animal\"\n              :body \"name of a part of the human body\"\n              :body_plural \"plural of a part of the human body\"\n              :food \"type of food\"\n              :food_plural \"plural of a type of food\"\n              :jj \"adjective\"\n              :liquid \"type of liquid\"\n              :nn \"noun\"\n              :nns    \"plural noun\"\n              :rb     \"adverb\"\n              :vb     \"verb, base form\"\n              :vbd     \"verb, past tense\"\n              :vbg     \"verb ending in \\\"ing\\\"\"\n              :vbn     \"verb, past participle\"\n              :vbz     \"verb ending in \\\"s\\\"\"})\n\n; (defn get-blank-spaces [str]\n;   (let [pattern (re-pattern \"<.{1,10}::.{1,10}>\")\n;         match (re-find pattern str)]\n;        (if (not (= match nil))\n;          (get-blank-spaces (str/replace-first str pattern \"Hood\"))\n;          (println str))))\n\n\n\n(def text (re-frame/subscribe [::subs/text]))\n(def blanks (re-frame/subscribe [::subs/remaining-blanks]))\n(def inputs (re-frame/subscribe [::subs/inputs]))\n\n(def input-data (reagent/atom {:text \"\"}))\n\n(defn debug-panel [] [:div.debug\n                      [:h3 \"Debugging\"]\n                      [:p (get-in @input-data [:text])]\n                      [:p (str \"remaining blanks \" @blanks)]\n                      [:p (str \"inputs \" @inputs)]])\n\n\n; <label for=\"inp\" class=\"inp\">\n;   <input type=\"text\" id=\"inp\" placeholder=\"&nbsp;\">\n;   <span class=\"label\">Label</span>\n;   <span class=\"border\"></span>\n; </label>\n\n(defn check-filled [input]\n  (if (= input \"\") \"___\" input))\n\n\n(defn custom-input [] [:label {:for \"inp\" :class \"inp\"}\n                       [:input {:type \"text\"\n                                :id \"inp\"\n                                :placeholder \"\"\n                                :value (get-in @input-data [:text])\n                                :on-change #(swap! input-data assoc :text (-> % .-target .-value))\n                                :on-key-press (fn [e]\n                                                (println \"key press\" (.-charCode e))\n                                                (if (= 13 (.-charCode e))\n                                                  (do\n                                                    (re-frame/dispatch [::events/set-inputs\n                                                                        (conj @inputs\n                                                                              (check-filled\n                                                                               (get-in @input-data [:text])))\n                                                                        (rest @blanks)])\n                                                    (swap! input-data assoc :text \"\"))))}]\n                       [:span {:class \"label\"} (get-in prompts [(keyword (first @blanks))])]\n                       [:span {:class \"border\"}]])\n\n\n(defn input-panel [] (let [no-input false]\n                       [:div\n                        [:h3 \"Mad Libs\"]\n                        [:p \"Fill in the blanks first\"]\n                        (custom-input)\n                        ; [:input {:id \"user-input\"\n                        ;          :type \"text\"\n                        ;          :value (get-in @input-data [:text])\n                        ;          :on-change #(swap! input-data assoc :text (-> % .-target .-value))}]\n                        [:button {:on-click (fn [] (do\n                                                     (re-frame/dispatch [::events/set-inputs\n                                                                         (conj @inputs\n                                                                               (check-filled\n                                                                                (get-in @input-data [:text]))) \n                                                                         (rest @blanks)])\n                                                     (swap! input-data assoc :text \"\")))} \"Enter\"]\n                        (debug-panel)]))\n\n(defn mad-lib-panel [] [:div\n                        ; [:div (get-blank-spaces \"\\\"Little Red Riding <Hood::nn/>\\\" is a/an <beloved::jj/> fairy tale\")]\n                        [:div\n                         [:h3 \"Mad Libs\"]\n                         [:div (utils/get-final-text @text @inputs)]\n                         (debug-panel)]])\n\n(defn main-panel []\n  [:div.container\n   (if (first @blanks)\n    (input-panel)\n    (mad-lib-panel))])\n"]}