{"version":3,"sources":["text_game/views.cljs"],"mappings":";;;;;;;;AASA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AA0BL,AAAKC,AAAK,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AACX,AAAKC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;AACb,AAAKG,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACJ,AAAAA,AAAAA;;AAEb,AAAKK,AAAW,AAAA,AAAA,AAAA,AAACC;AAEjB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAE0B,AAAA,AAAAC,AAAA,AAAA,AAACC,AAAQJ,AACT,AAAA,AAAA,AAAAG,AAA0BP,AAC1B,AAAA,AAAA,AAAAO,AAAgBL;;AAG1C,AAAA,AAAMQ;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAG0B,AAAA,AAAkB,AAAA,AAACD,AAAOZ,AAAS,AAACe,AAAQ,AAAA,AAAAJ,AAACK,AAAOZ,AAGxC,AAAA,AAAAO,AAAA,AAAA,AAACC,AAAQJ;AAN/C,AAO2C,AAAA,AAACS,AAAMT,AAAWU,AAAY,AAAA,AAAAL;AAPzE,AAAA,AAAA,AAAA,AAQ0C;AAAA,AAAO,AACE,AAACM,AAAQ,AAAA,AAAAR,AAAA,AAAA,AAACC,AAAQJ;;AAClB,AAAAY,AAAA,AAAA,AAAwC,AAAA,AAAAT,AAACW,AAAMhB,AAAO,AAAA,AAAAK,AAAA,AAAA,AAACC,AAAQJ,AAAqB,AAAA,AAAAG,AAACY,AAAMnB;AAA3F,AAAA,AAAAgB,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAAA,AAAA,AAACJ,AAAMT,AAAWU;AAXrE,AAYsB,AAACR;;AAEvB,AAAA,AAAMc;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI6B,AAAA,AAAAb,AAAA,AAAAA,AAACc,AAAsBxB,AAAMK,AACjC,AAACI;;AAE1B,AAAA,AAAMgB;AAAN,AACE,AAAI,AAAA,AAAAf,AAACK,AAAOZ;AACV,AAACU;;AACD,AAACU","names":["text-game.views/prompts","text-game.views/text","G__42243","re-frame.core/subscribe","text-game.views/blanks","G__42244","text-game.views/inputs","G__42245","text-game.views/input-data","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","text-game.views/debug-panel","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p1__42246#","text-game.views/input-panel","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","G__42247","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","text-game.views/mad-lib-panel","text-game.utils/get-final-text","text-game.views/main-panel"],"sourcesContent":["(ns text-game.views\n  (:require\n   [reagent.core :as reagent]\n   [re-frame.core :as re-frame]\n   [text-game.events :as events]\n   [text-game.subs :as subs]\n   [clojure.string :as str]\n   [text-game.utils :as utils]))\n\n(def prompts {:animal \"name of an animal\"\n              :animal_plural \"plural of an animal\"\n              :body \"name of a part of the human body\"\n              :body_plural \"plural of a part of the human body\"\n              :food \"type of food\"\n              :food_plural \"plural of a type of food\"\n              :jj \"adjective\"\n              :liquid \"type of liquid\"\n              :nn \"noun\"\n              :nns    \"plural noun\"\n              :rb     \"adverb\"\n              :vb     \"verb, base form\"\n              :vbd     \"verb, past tense\"\n              :vbg     \"verb ending in \\\"ing\\\"\"\n              :vbn     \"verb, past participle\"\n              :vbz     \"verb ending in \\\"s\\\"\"})\n\n; (defn get-blank-spaces [str]\n;   (let [pattern (re-pattern \"<.{1,10}::.{1,10}>\")\n;         match (re-find pattern str)]\n;        (if (not (= match nil))\n;          (get-blank-spaces (str/replace-first str pattern \"Hood\"))\n;          (println str))))\n\n\n\n(def text (re-frame/subscribe [::subs/text]))\n(def blanks (re-frame/subscribe [::subs/remaining-blanks]))\n(def inputs (re-frame/subscribe [::subs/inputs]))\n\n(def input-data (reagent/atom {:text \"\"}))\n\n(defn debug-panel [] [:div\n                      [:h3 \"Debugging\"]\n                      [:p (get-in @input-data [:text])]\n                      [:p (str \"remaining blanks \" @blanks)]\n                      [:p (str \"inputs \" @inputs)]])\n\n\n(defn input-panel [] [:div\n                      [:h3 \"Mad Libs\"]\n                      [:p \"Fill in the blanks first\"]\n                      [:p (str \"Enter a(n) \"(get-in prompts [(keyword (first @blanks))]))]\n                      [:input {:id \"user-input\"\n                               :type \"text\"\n                               :value (get-in @input-data [:text])\n                               :on-change #(swap! input-data assoc :text (-> % .-target .-value))}]\n                      [:button {:on-click (fn [] (do\n                                                   (println (get-in @input-data [:text]))\n                                                   (re-frame/dispatch [::events/set-inputs (conj @inputs (get-in @input-data [:text])) (rest @blanks)])\n                                                   (swap! input-data assoc :text \"\")))} \"submit\"]\n                      (debug-panel)])\n\n(defn mad-lib-panel [] [:div\n                        ; [:div (get-blank-spaces \"\\\"Little Red Riding <Hood::nn/>\\\" is a/an <beloved::jj/> fairy tale\")]\n                        [:div\n                         [:h3 \"Mad Libs\"]\n                         [:p (utils/get-final-text @text @inputs)]\n                         (debug-panel)]])\n\n(defn main-panel []\n  (if (first @blanks)\n    (input-panel)\n    (mad-lib-panel)))\n"]}