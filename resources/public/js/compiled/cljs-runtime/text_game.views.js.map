{"version":3,"sources":["text_game/views.cljs"],"mappings":"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","names":["text-game.views/prompts","text-game.views/extract-prompt","s","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","text-game.views/parse-blanks","blanks","prompts","cljs.core/first","G__41132","G__41133","cljs.core/rest","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","text-game.views/get-blank-spaces","str","pattern","cljs.core/re-pattern","cljs.core/re-seq","text-game.views/text","G__41134","re-frame.core/subscribe","text-game.views/input-data","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","text-game.views/setParse","G__41135","re-frame.core/dispatch","cljs.core/deref","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","text-game.views/main-panel","text","G__41137","G__41138","inputs","G__41139","p1__41136#","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__41140"],"sourcesContent":["(ns text-game.views\n  (:require\n   [reagent.core :as reagent]\n   [re-frame.core :as re-frame]\n   [text-game.events :as events]\n   [text-game.subs :as subs]\n   [clojure.string :as str]))\n\n(def prompts {:animal \"name of an animal\"\n              :animal_plural \"plural of an animal\"\n              :body \"name of a part of the human body\"\n              :body_plural \"plural of a part of the human body\"\n              :food \"type of food\"\n              :food_plural \"plural of a type of food\"\n              :jj \"adjective\"\n              :liquid \"type of liquid\"\n              :nn \"noun\"\n              :nns    \"plural noun\"\n              :rb     \"adverb\"\n              :vb     \"verb, base form\"\n              :vbd     \"verb, past tense\"\n              :vbg     \"Verb ending in \\\"ing\\\"\"\n              :vbn     \"verb, past participle\"\n              :vbz     \"Verb ending in \\\"s\\\"\"})\n\n; (defn get-blank-spaces [str]\n;   (let [pattern (re-pattern \"<.{1,10}::.{1,10}>\")\n;         match (re-find pattern str)]\n;        (if (not (= match nil))\n;          (get-blank-spaces (str/replace-first str pattern \"Hood\"))\n;          (println str))))\n\n(defn extract-prompt [s]\n  (subs s (inc (.lastIndexOf s \":\")) (.lastIndexOf s \"/\")))\n\n(defn parse-blanks [blanks prompts]\n  (if (first blanks)\n      (parse-blanks\n        (rest blanks)\n        (conj prompts (extract-prompt (first blanks))))\n      prompts))\n\n(defn get-blank-spaces [str]\n  (let [pattern (re-pattern \"<.{1,10}::.{1,10}>\")]\n      (parse-blanks (re-seq pattern str) ())))\n\n; (do (println str)\n;     (println pattern)\n;     (println (re-matches #\"hello.*\" \"hello, world hefllo as.\"))\n;   (println (re-find #\"<.{1,10}::.{1,10}>\" str)))))\n\n; (println (re-matches #\"<.{1,10}::.{1,10}>\" \"<hi::jk>\"))\n;\n; (parse-blanks (list <asfd::asd> <ewq::asDf>))\n\n(def text (re-frame/subscribe [::subs/text]))\n\n(def input-data (reagent/atom {:text \"\"}))\n\n\n;; TODO: On first load, text is nil. subscribe hasn't pushed value to text yet\n(defn setParse []\n  (re-frame/dispatch [::events/set-blanks (get-blank-spaces @text)])\n  (println @text))\n\n\n(setParse)\n\n\n(defn main-panel []\n  (let [text (re-frame/subscribe [::subs/text])\n        blanks (re-frame/subscribe [::subs/remaining-blanks])\n        inputs (re-frame/subscribe [::subs/inputs])]\n    (if (first @blanks)\n      [:div \"remaining blanks\"\n       [:h3 \"Prompt: \"]\n       [:p (get-in prompts [(keyword (first @blanks))])]\n       [:input {:id \"user-input\"\n                :type \"text\"\n                :val (get-in @input-data [:text])\n                :on-change #(swap! input-data assoc :text (-> % .-target .-value))}]\n       [:button {:on-click (fn [] (do\n                                    (println (get-in @input-data [:text]))\n                                    (re-frame/dispatch [::events/set-inputs (conj @inputs (get-in @input-data [:text])) (rest @blanks)])\n                                    (swap! input-data assoc :text \"\")))} \"submit\"]\n       [:p (str \"rest \" (rest @blanks))]\n       [:p (get-in @input-data [:text])]\n       [:p (str \"all \" @blanks)]\n       [:p (str \"inputs \" @inputs)]]\n      [:div\n       ; [:div (get-blank-spaces \"\\\"Little Red Riding <Hood::nn/>\\\" is a/an <beloved::jj/> fairy tale\")]\n       [:div\n        [:p (str \"rest \" (rest @blanks))]\n        [:p (get-in @input-data [:text])]\n        [:p (str \"all \" @blanks)]\n        [:p (str \"inputs \" @inputs)]\n        [:p (get-in prompts [:jj])]]])))\n"]}