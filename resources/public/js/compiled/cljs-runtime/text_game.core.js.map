{"version":3,"sources":["text_game/core.cljs"],"mappings":";;;;;;;;;AAyCA,AAAKA,AAAK,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAGX,AAAA,AAAMC;AAAN,AACE,AACE,AAAA,AAAAC,AAACC,AAASL;;AACV,AAACK,AAAQ,AAAA,AAAAD,AAACE,AAAmBN;;AAC7B,AAAAO,AAAA,AAAA,AAAwC,AAAA,AAAAH,AAACE,AAAmBN;AAA5D,AAAA,AAAAO,AAAAA,AAACC,AAAAA,AAAAA;;AAEL,AAAA,AAAMC;AAAN,AACE,AAAMC;AAAN,AACE,AAAA,AAACL;;AADH;;;AAGF,AAAA,AAAuBM;AAAvB,AACE,AAACC,AAAAA,AAAAA;;AACD,AAAA,AAACC,AAAgBC,AACD,AAAA,AAAiBC;;AAEnC,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAACf;;AACD,AAACM;;AACD,AAACE","names":["text-game.core/text","G__42238","re-frame.core/subscribe","text-game.core/setParse","cljs.core/deref","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","text-game.utils/get-prompts","G__42239","re-frame.core/dispatch","text-game.core/dev-setup","text-game.config/debug?","text-game.core/mount-root","re-frame.core/clear-subscription-cache!","reagent.core.render.cljs$core$IFn$_invoke$arity$2","text-game.views/main-panel","js/document","text-game.core/init","G__42241","re-frame.core/dispatch-sync"],"sourcesContent":["(ns text-game.core\n  (:require\n   [reagent.core :as reagent]\n   [re-frame.core :as re-frame]\n   [text-game.events :as events]\n   [text-game.subs :as subs]\n   [text-game.views :as views]\n   [text-game.config :as config]\n   [text-game.utils :as utils]))\n   ;; [\"fs\" :as fs]))\n\n;; TODO: having trouble getting interop with node.js libraries\n\n; (defn node-slurp [path]\n;   (let [fs (nodejs/require \"fs\")]\n;     (.readFileSync fs path \"utf8\")))\n\n; (defn extract-prompt [s]\n;   (subs s (inc (.lastIndexOf s \":\")) (.lastIndexOf s \"/\")))\n;\n; (defn parse-blanks [blanks prompts]\n;   (if (first blanks)\n;       (parse-blanks\n;         (rest blanks)\n;         (conj prompts (extract-prompt (first blanks))))\n;       prompts))\n\n; (defn get-blank-spaces [str]\n;   (let [pattern (re-pattern \"<.{1,10}::.{1,10}>\")]\n;       (utils/parse-blanks (re-seq pattern str) ())))\n\n\n; (do (println str)\n;     (println pattern)\n;     (println (re-matches #\"hello.*\" \"hello, world hefllo as.\"))\n;   (println (re-find #\"<.{1,10}::.{1,10}>\" str)))))\n\n; (println (re-matches #\"<.{1,10}::.{1,10}>\" \"<hi::jk>\"))\n;\n; (parse-blanks (list <asfd::asd> <ewq::asDf>))\n\n(def text (re-frame/subscribe [::subs/text]))\n\n;; TODO: On first load, text is nil. subscribe hasn't pushed value to text yet\n(defn setParse []\n  (do\n    (println @text)\n    (println (utils/get-prompts @text))\n    (re-frame/dispatch [::events/set-blanks (utils/get-prompts @text)])))\n\n(defn dev-setup []\n  (when config/debug?\n    (println \"dev mode\")))\n\n(defn ^:dev/after-load mount-root []\n  (re-frame/clear-subscription-cache!)\n  (reagent/render [views/main-panel]\n                  (.getElementById js/document \"app\")))\n\n(defn init []\n  (re-frame/dispatch-sync [::events/initialize-db])\n  (setParse)\n  (dev-setup)\n  (mount-root))\n"]}